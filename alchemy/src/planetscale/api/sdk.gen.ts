// This file is auto-generated by @hey-api/openapi-ts

import type {
  Client,
  Options as Options2,
  TDataShape,
} from "../../util/api/client/index.ts";
import { client } from "./client.gen.ts";
import type {
  CancelBranchChangeRequestData,
  CancelBranchChangeRequestErrors,
  CancelBranchChangeRequestResponses,
  CancelDeployRequestData,
  CancelDeployRequestErrors,
  CancelDeployRequestResponses,
  CloseDeployRequestData,
  CloseDeployRequestErrors,
  CloseDeployRequestResponses,
  CompleteErroredDeployData,
  CompleteErroredDeployErrors,
  CompleteErroredDeployResponses,
  CompleteGatedDeployRequestData,
  CompleteGatedDeployRequestErrors,
  CompleteGatedDeployRequestResponses,
  CompleteRevertData,
  CompleteRevertErrors,
  CompleteRevertResponses,
  CreateBackupData,
  CreateBackupErrors,
  CreateBackupResponses,
  CreateBranchData,
  CreateBranchErrors,
  CreateBranchResponses,
  CreateDatabaseData,
  CreateDatabaseErrors,
  CreateDatabaseResponses,
  CreateDeployRequestData,
  CreateDeployRequestErrors,
  CreateDeployRequestResponses,
  CreateKeyspaceData,
  CreateKeyspaceErrors,
  CreateKeyspaceResponses,
  CreateOauthTokenData,
  CreateOauthTokenErrors,
  CreateOauthTokenResponses,
  CreatePasswordData,
  CreatePasswordErrors,
  CreatePasswordResponses,
  CreateQueryPatternsReportData,
  CreateQueryPatternsReportErrors,
  CreateQueryPatternsReportResponses,
  CreateRoleData,
  CreateRoleErrors,
  CreateRoleResponses,
  CreateWebhookData,
  CreateWebhookErrors,
  CreateWebhookResponses,
  CreateWorkflowData,
  CreateWorkflowErrors,
  CreateWorkflowResponses,
  DeleteBackupData,
  DeleteBackupErrors,
  DeleteBackupResponses,
  DeleteBranchData,
  DeleteBranchErrors,
  DeleteBranchResponses,
  DeleteDatabaseData,
  DeleteDatabaseErrors,
  DeleteDatabaseResponses,
  DeleteKeyspaceData,
  DeleteKeyspaceErrors,
  DeleteKeyspaceResponses,
  DeleteOauthTokenData,
  DeleteOauthTokenErrors,
  DeleteOauthTokenResponses,
  DeletePasswordData,
  DeletePasswordErrors,
  DeletePasswordResponses,
  DeleteQueryPatternsReportData,
  DeleteQueryPatternsReportErrors,
  DeleteQueryPatternsReportResponses,
  DeleteRoleData,
  DeleteRoleErrors,
  DeleteRoleResponses,
  DeleteWebhookData,
  DeleteWebhookErrors,
  DeleteWebhookResponses,
  DemoteBranchData,
  DemoteBranchErrors,
  DemoteBranchResponses,
  DisableSafeMigrationsData,
  DisableSafeMigrationsErrors,
  DisableSafeMigrationsResponses,
  EnableSafeMigrationsData,
  EnableSafeMigrationsErrors,
  EnableSafeMigrationsResponses,
  GetBackupData,
  GetBackupErrors,
  GetBackupResponses,
  GetBranchData,
  GetBranchErrors,
  GetBranchResponses,
  GetBranchSchemaData,
  GetBranchSchemaErrors,
  GetBranchSchemaResponses,
  GetCurrentUserData,
  GetCurrentUserErrors,
  GetCurrentUserResponses,
  GetDatabaseData,
  GetDatabaseErrors,
  GetDatabaseResponses,
  GetDatabaseThrottlerData,
  GetDatabaseThrottlerErrors,
  GetDatabaseThrottlerResponses,
  GetDeploymentData,
  GetDeploymentErrors,
  GetDeploymentResponses,
  GetDeployQueueData,
  GetDeployQueueErrors,
  GetDeployQueueResponses,
  GetDeployRequestData,
  GetDeployRequestErrors,
  GetDeployRequestResponses,
  GetDeployRequestThrottlerData,
  GetDeployRequestThrottlerErrors,
  GetDeployRequestThrottlerResponses,
  GetInvoiceData,
  GetInvoiceErrors,
  GetInvoiceLineItemsData,
  GetInvoiceLineItemsErrors,
  GetInvoiceLineItemsResponses,
  GetInvoiceResponses,
  GetKeyspaceData,
  GetKeyspaceErrors,
  GetKeyspaceResponses,
  GetKeyspaceRolloutStatusData,
  GetKeyspaceRolloutStatusErrors,
  GetKeyspaceRolloutStatusResponses,
  GetKeyspaceVschemaData,
  GetKeyspaceVschemaErrors,
  GetKeyspaceVschemaResponses,
  GetOauthApplicationData,
  GetOauthApplicationErrors,
  GetOauthApplicationResponses,
  GetOauthTokenData,
  GetOauthTokenErrors,
  GetOauthTokenResponses,
  GetOrganizationData,
  GetOrganizationErrors,
  GetOrganizationResponses,
  GetPasswordData,
  GetPasswordErrors,
  GetPasswordResponses,
  GetQueryPatternsReportData,
  GetQueryPatternsReportErrors,
  GetQueryPatternsReportStatusData,
  GetQueryPatternsReportStatusErrors,
  GetQueryPatternsReportStatusResponses,
  GetRoleData,
  GetRoleErrors,
  GetRoleResponses,
  GetWebhookData,
  GetWebhookErrors,
  GetWebhookResponses,
  GetWorkflowData,
  GetWorkflowErrors,
  GetWorkflowResponses,
  LintBranchSchemaData,
  LintBranchSchemaErrors,
  LintBranchSchemaResponses,
  ListAuditLogsData,
  ListAuditLogsErrors,
  ListAuditLogsResponses,
  ListBackupsData,
  ListBackupsErrors,
  ListBackupsResponses,
  ListBranchChangeRequestsData,
  ListBranchChangeRequestsErrors,
  ListBranchChangeRequestsResponses,
  ListBranchesData,
  ListBranchesErrors,
  ListBranchesResponses,
  ListDatabaseRegionsData,
  ListDatabaseRegionsErrors,
  ListDatabaseRegionsResponses,
  ListDatabasesData,
  ListDatabasesErrors,
  ListDatabasesResponses,
  ListDeployOperationsData,
  ListDeployOperationsErrors,
  ListDeployOperationsResponses,
  ListDeployRequestReviewsData,
  ListDeployRequestReviewsErrors,
  ListDeployRequestReviewsResponses,
  ListDeployRequestsData,
  ListDeployRequestsErrors,
  ListDeployRequestsResponses,
  ListExtensionsData,
  ListExtensionsErrors,
  ListExtensionsResponses,
  ListGeneratedQueryPatternsReportsData,
  ListGeneratedQueryPatternsReportsErrors,
  ListGeneratedQueryPatternsReportsResponses,
  ListInvoicesData,
  ListInvoicesErrors,
  ListInvoicesResponses,
  ListKeyspaceResizesData,
  ListKeyspaceResizesErrors,
  ListKeyspaceResizesResponses,
  ListKeyspacesData,
  ListKeyspacesErrors,
  ListKeyspacesResponses,
  ListOauthApplicationsData,
  ListOauthApplicationsErrors,
  ListOauthApplicationsResponses,
  ListOauthTokensData,
  ListOauthTokensErrors,
  ListOauthTokensResponses,
  ListOrganizationMembersData,
  ListOrganizationMembersErrors,
  ListOrganizationMembersResponses,
  ListOrganizationsData,
  ListOrganizationsErrors,
  ListOrganizationsResponses,
  ListParametersData,
  ListParametersErrors,
  ListParametersResponses,
  ListPasswordsData,
  ListPasswordsErrors,
  ListPasswordsResponses,
  ListPublicRegionsData,
  ListPublicRegionsErrors,
  ListPublicRegionsResponses,
  ListReadOnlyRegionsData,
  ListReadOnlyRegionsErrors,
  ListReadOnlyRegionsResponses,
  ListRegionsForOrganizationData,
  ListRegionsForOrganizationErrors,
  ListRegionsForOrganizationResponses,
  ListRolesData,
  ListRolesErrors,
  ListRolesResponses,
  ListWebhooksData,
  ListWebhooksErrors,
  ListWebhooksResponses,
  ListWorkflowsData,
  ListWorkflowsErrors,
  ListWorkflowsResponses,
  PromoteBranchData,
  PromoteBranchErrors,
  PromoteBranchResponses,
  QueueDeployRequestData,
  QueueDeployRequestErrors,
  QueueDeployRequestResponses,
  RenewPasswordData,
  RenewPasswordErrors,
  RenewPasswordResponses,
  RenewRoleData,
  RenewRoleErrors,
  RenewRoleResponses,
  ReviewDeployRequestData,
  ReviewDeployRequestErrors,
  ReviewDeployRequestResponses,
  SkipRevertPeriodData,
  SkipRevertPeriodErrors,
  SkipRevertPeriodResponses,
  TestWebhookData,
  TestWebhookErrors,
  TestWebhookResponses,
  UpdateAutoApplyData,
  UpdateAutoApplyErrors,
  UpdateAutoApplyResponses,
  UpdateBackupData,
  UpdateBackupErrors,
  UpdateBackupResponses,
  UpdateBranchChangeRequestData,
  UpdateBranchChangeRequestErrors,
  UpdateBranchChangeRequestResponses,
  UpdateBranchClusterConfigData,
  UpdateBranchClusterConfigErrors,
  UpdateBranchClusterConfigResponses,
  UpdateDatabaseSettingsData,
  UpdateDatabaseSettingsErrors,
  UpdateDatabaseSettingsResponses,
  UpdateDatabaseThrottlerData,
  UpdateDatabaseThrottlerErrors,
  UpdateDatabaseThrottlerResponses,
  UpdateDeployRequestThrottlerData,
  UpdateDeployRequestThrottlerErrors,
  UpdateDeployRequestThrottlerResponses,
  UpdateKeyspaceData,
  UpdateKeyspaceErrors,
  UpdateKeyspaceResponses,
  UpdateKeyspaceVschemaData,
  UpdateKeyspaceVschemaErrors,
  UpdateKeyspaceVschemaResponses,
  UpdateOrganizationData,
  UpdateOrganizationErrors,
  UpdateOrganizationResponses,
  UpdatePasswordData,
  UpdatePasswordErrors,
  UpdatePasswordResponses,
  UpdateRoleData,
  UpdateRoleErrors,
  UpdateRoleResponses,
  UpdateWebhookData,
  UpdateWebhookErrors,
  UpdateWebhookResponses,
  VerifyWorkflowData,
  VerifyWorkflowErrors,
  VerifyWorkflowResponses,
  WorkflowCancelData,
  WorkflowCancelErrors,
  WorkflowCancelResponses,
  WorkflowCompleteData,
  WorkflowCompleteErrors,
  WorkflowCompleteResponses,
  WorkflowCutoverData,
  WorkflowCutoverErrors,
  WorkflowCutoverResponses,
  WorkflowRetryData,
  WorkflowRetryErrors,
  WorkflowRetryResponses,
  WorkflowReverseCutoverData,
  WorkflowReverseCutoverErrors,
  WorkflowReverseCutoverResponses,
  WorkflowReverseTrafficData,
  WorkflowReverseTrafficErrors,
  WorkflowReverseTrafficResponses,
  WorkflowSwitchPrimariesData,
  WorkflowSwitchPrimariesErrors,
  WorkflowSwitchPrimariesResponses,
  WorkflowSwitchReplicasData,
  WorkflowSwitchReplicasErrors,
  WorkflowSwitchReplicasResponses,
} from "./types.gen.ts";

export type Options<
  TData extends TDataShape = TDataShape,
  ThrowOnError extends boolean = boolean,
> = Options2<TData, ThrowOnError> & {
  /**
   * You can provide a client instance returned by `createClient()` instead of
   * individual options. This might be also useful if you want to implement a
   * custom client.
   */
  client?: Client;
  /**
   * You can pass arbitrary values through the `meta` object. This can be
   * used to access values that aren't defined as part of the SDK function.
   */
  meta?: Record<string, unknown>;
};

class _HeyApiClient {
  protected _client: Client = client;

  constructor(args?: { client?: Client }) {
    if (args?.client) {
      this._client = args.client;
    }
  }
}

export class PlanetScaleClient extends _HeyApiClient {
  /**
   * List organizations
   * When using a service token, returns the list of organizations the service token has access to. When using an OAuth token, returns the list of organizations the user has access to.
   * ### Authorization
   * A   OAuth token must have at least one of the following   scopes in order to use this API endpoint:
   *
   * **OAuth Scopes**
   *
   * | Resource | Scopes |
   * | :------- | :---------- |
   * | User | `read_organizations` |
   */
  public listOrganizations<ThrowOnError extends boolean = true>(
    options?: Options<ListOrganizationsData, ThrowOnError>,
  ) {
    return (options?.client ?? this._client).get<
      ListOrganizationsResponses,
      ListOrganizationsErrors,
      ThrowOnError
    >({
      url: "/organizations",
      ...options,
    });
  }

  /**
   * Get an organization
   *
   * ### Authorization
   * A service token or OAuth token must have at least one of the following access or scopes in order to use this API endpoint:
   *
   * **Service Token Accesses**
   * `read_organization`
   *
   * **OAuth Scopes**
   *
   * | Resource | Scopes |
   * | :------- | :---------- |
   * | User | `read_organizations` |
   * | Organization | `read_organization` |
   */
  public getOrganization<ThrowOnError extends boolean = true>(
    options: Options<GetOrganizationData, ThrowOnError>,
  ) {
    return (options.client ?? this._client).get<
      GetOrganizationResponses,
      GetOrganizationErrors,
      ThrowOnError
    >({
      url: "/organizations/{name}",
      ...options,
    });
  }

  /**
   * Update an organization
   *
   * ### Authorization
   * A   OAuth token must have at least one of the following   scopes in order to use this API endpoint:
   *
   * **OAuth Scopes**
   *
   * | Resource | Scopes |
   * | :------- | :---------- |
   * | Organization | `write_organization` |
   */
  public updateOrganization<ThrowOnError extends boolean = true>(
    options: Options<UpdateOrganizationData, ThrowOnError>,
  ) {
    return (options.client ?? this._client).patch<
      UpdateOrganizationResponses,
      UpdateOrganizationErrors,
      ThrowOnError
    >({
      url: "/organizations/{name}",
      ...options,
      headers: {
        "Content-Type": "application/json",
        ...options.headers,
      },
    });
  }

  /**
   * List audit logs
   *
   * ### Authorization
   * A service token   must have at least one of the following access   in order to use this API endpoint:
   *
   * **Service Token Accesses**
   * `read_audit_logs`
   *
   *
   */
  public listAuditLogs<ThrowOnError extends boolean = true>(
    options: Options<ListAuditLogsData, ThrowOnError>,
  ) {
    return (options.client ?? this._client).get<
      ListAuditLogsResponses,
      ListAuditLogsErrors,
      ThrowOnError
    >({
      url: "/organizations/{name}/audit-log",
      ...options,
    });
  }

  /**
   * List regions for an organization
   *
   * ### Authorization
   * A service token or OAuth token must have at least one of the following access or scopes in order to use this API endpoint:
   *
   * **Service Token Accesses**
   * `read_organization`
   *
   * **OAuth Scopes**
   *
   * | Resource | Scopes |
   * | :------- | :---------- |
   * | User | `read_organizations` |
   * | Organization | `read_organization` |
   */
  public listRegionsForOrganization<ThrowOnError extends boolean = true>(
    options: Options<ListRegionsForOrganizationData, ThrowOnError>,
  ) {
    return (options.client ?? this._client).get<
      ListRegionsForOrganizationResponses,
      ListRegionsForOrganizationErrors,
      ThrowOnError
    >({
      url: "/organizations/{name}/regions",
      ...options,
    });
  }

  /**
   * List databases
   *
   * ### Authorization
   * A service token or OAuth token must have at least one of the following access or scopes in order to use this API endpoint:
   *
   * **Service Token Accesses**
   * `read_database`, `delete_database`, `write_database`, `read_branch`, `delete_branch`, `create_branch`, `delete_production_branch`, `connect_branch`, `connect_production_branch`, `delete_branch_password`, `delete_production_branch_password`, `read_deploy_request`, `create_deploy_request`, `approve_deploy_request`, `read_schema_recommendations`, `close_schema_recommendations`, `read_comment`, `create_comment`, `restore_backup`, `restore_production_branch_backup`, `read_backups`, `write_backups`, `delete_backups`, `delete_production_branch_backups`, `write_branch_vschema`, `write_production_branch_vschema`
   *
   * **OAuth Scopes**
   *
   * | Resource | Scopes |
   * | :------- | :---------- |
   * | Organization | `read_databases` |
   */
  public listDatabases<ThrowOnError extends boolean = true>(
    options: Options<ListDatabasesData, ThrowOnError>,
  ) {
    return (options.client ?? this._client).get<
      ListDatabasesResponses,
      ListDatabasesErrors,
      ThrowOnError
    >({
      url: "/organizations/{organization}/databases",
      ...options,
    });
  }

  /**
   * Create a database
   *
   * ### Authorization
   * A service token or OAuth token must have at least one of the following access or scopes in order to use this API endpoint:
   *
   * **Service Token Accesses**
   * `create_databases`
   *
   * **OAuth Scopes**
   *
   * | Resource | Scopes |
   * | :------- | :---------- |
   * | Organization | `create_databases` |
   */
  public createDatabase<ThrowOnError extends boolean = true>(
    options: Options<CreateDatabaseData, ThrowOnError>,
  ) {
    return (options.client ?? this._client).post<
      CreateDatabaseResponses,
      CreateDatabaseErrors,
      ThrowOnError
    >({
      url: "/organizations/{organization}/databases",
      ...options,
      headers: {
        "Content-Type": "application/json",
        ...options.headers,
      },
    });
  }

  /**
   * List branches
   *
   * ### Authorization
   * A service token or OAuth token must have at least one of the following access or scopes in order to use this API endpoint:
   *
   * **Service Token Accesses**
   * `read_branch`, `delete_branch`, `create_branch`, `connect_production_branch`, `connect_branch`
   *
   * **OAuth Scopes**
   *
   * | Resource | Scopes |
   * | :------- | :---------- |
   * | Organization | `read_branches` |
   * | Database | `read_branches` |
   * | Branch | `read_branch` |
   */
  public listBranches<ThrowOnError extends boolean = true>(
    options: Options<ListBranchesData, ThrowOnError>,
  ) {
    return (options.client ?? this._client).get<
      ListBranchesResponses,
      ListBranchesErrors,
      ThrowOnError
    >({
      url: "/organizations/{organization}/databases/{database}/branches",
      ...options,
    });
  }

  /**
   * Create a branch
   *
   * ### Authorization
   * A service token or OAuth token must have at least one of the following access or scopes in order to use this API endpoint:
   *
   * **Service Token Accesses**
   * `create_branch`, `restore_production_branch_backup`, `restore_backup`
   *
   * **OAuth Scopes**
   *
   * | Resource | Scopes |
   * | :------- | :---------- |
   * | Organization | `write_branches`, `restore_production_branch_backups`, `restore_backups` |
   * | Database | `write_branches`, `restore_production_branch_backups`, `restore_backups` |
   * | Branch | `restore_backups` |
   */
  public createBranch<ThrowOnError extends boolean = true>(
    options: Options<CreateBranchData, ThrowOnError>,
  ) {
    return (options.client ?? this._client).post<
      CreateBranchResponses,
      CreateBranchErrors,
      ThrowOnError
    >({
      url: "/organizations/{organization}/databases/{database}/branches",
      ...options,
      headers: {
        "Content-Type": "application/json",
        ...options.headers,
      },
    });
  }

  /**
   * List backups
   *
   * ### Authorization
   * A service token or OAuth token must have at least one of the following access or scopes in order to use this API endpoint:
   *
   * **Service Token Accesses**
   * `read_backups`
   *
   * **OAuth Scopes**
   *
   * | Resource | Scopes |
   * | :------- | :---------- |
   * | Organization | `read_backups` |
   * | Database | `read_backups` |
   * | Branch | `read_backups` |
   */
  public listBackups<ThrowOnError extends boolean = true>(
    options: Options<ListBackupsData, ThrowOnError>,
  ) {
    return (options.client ?? this._client).get<
      ListBackupsResponses,
      ListBackupsErrors,
      ThrowOnError
    >({
      url: "/organizations/{organization}/databases/{database}/branches/{branch}/backups",
      ...options,
    });
  }

  /**
   * Create a backup
   *
   * ### Authorization
   * A service token or OAuth token must have at least one of the following access or scopes in order to use this API endpoint:
   *
   * **Service Token Accesses**
   * `write_backups`
   *
   * **OAuth Scopes**
   *
   * | Resource | Scopes |
   * | :------- | :---------- |
   * | Organization | `write_backups` |
   * | Database | `write_backups` |
   * | Branch | `write_backups` |
   */
  public createBackup<ThrowOnError extends boolean = true>(
    options: Options<CreateBackupData, ThrowOnError>,
  ) {
    return (options.client ?? this._client).post<
      CreateBackupResponses,
      CreateBackupErrors,
      ThrowOnError
    >({
      url: "/organizations/{organization}/databases/{database}/branches/{branch}/backups",
      ...options,
      headers: {
        "Content-Type": "application/json",
        ...options.headers,
      },
    });
  }

  /**
   * Delete a backup
   *
   * ### Authorization
   * A service token or OAuth token must have at least one of the following access or scopes in order to use this API endpoint:
   *
   * **Service Token Accesses**
   * `delete_backups`, `delete_production_branch_backups`
   *
   * **OAuth Scopes**
   *
   * | Resource | Scopes |
   * | :------- | :---------- |
   * | Organization | `delete_backups`, `delete_production_branch_backups` |
   * | Database | `delete_backups`, `delete_production_branch_backups` |
   * | Branch | `delete_backups` |
   */
  public deleteBackup<ThrowOnError extends boolean = true>(
    options: Options<DeleteBackupData, ThrowOnError>,
  ) {
    return (options.client ?? this._client).delete<
      DeleteBackupResponses,
      DeleteBackupErrors,
      ThrowOnError
    >({
      url: "/organizations/{organization}/databases/{database}/branches/{branch}/backups/{id}",
      ...options,
    });
  }

  /**
   * Get a backup
   *
   * ### Authorization
   * A service token or OAuth token must have at least one of the following access or scopes in order to use this API endpoint:
   *
   * **Service Token Accesses**
   * `read_backups`
   *
   * **OAuth Scopes**
   *
   * | Resource | Scopes |
   * | :------- | :---------- |
   * | Organization | `read_backups` |
   * | Database | `read_backups` |
   * | Branch | `read_backups` |
   */
  public getBackup<ThrowOnError extends boolean = true>(
    options: Options<GetBackupData, ThrowOnError>,
  ) {
    return (options.client ?? this._client).get<
      GetBackupResponses,
      GetBackupErrors,
      ThrowOnError
    >({
      url: "/organizations/{organization}/databases/{database}/branches/{branch}/backups/{id}",
      ...options,
    });
  }

  /**
   * Update a backup
   *
   * ### Authorization
   * A service token or OAuth token must have at least one of the following access or scopes in order to use this API endpoint:
   *
   * **Service Token Accesses**
   * `write_backups`
   *
   * **OAuth Scopes**
   *
   * | Resource | Scopes |
   * | :------- | :---------- |
   * | Organization | `write_backups` |
   * | Database | `write_backups` |
   * | Branch | `write_backups` |
   */
  public updateBackup<ThrowOnError extends boolean = true>(
    options: Options<UpdateBackupData, ThrowOnError>,
  ) {
    return (options.client ?? this._client).patch<
      UpdateBackupResponses,
      UpdateBackupErrors,
      ThrowOnError
    >({
      url: "/organizations/{organization}/databases/{database}/branches/{branch}/backups/{id}",
      ...options,
      headers: {
        "Content-Type": "application/json",
        ...options.headers,
      },
    });
  }

  /**
   * Get branch change requests
   *
   * ### Authorization
   * A service token or OAuth token must have at least one of the following access or scopes in order to use this API endpoint:
   *
   * **Service Token Accesses**
   * `read_branch`, `delete_branch`, `create_branch`, `connect_production_branch`, `connect_branch`
   *
   * **OAuth Scopes**
   *
   * | Resource | Scopes |
   * | :------- | :---------- |
   * | Organization | `read_branches` |
   * | Database | `read_branches` |
   * | Branch | `read_branch` |
   */
  public listBranchChangeRequests<ThrowOnError extends boolean = true>(
    options: Options<ListBranchChangeRequestsData, ThrowOnError>,
  ) {
    return (options.client ?? this._client).get<
      ListBranchChangeRequestsResponses,
      ListBranchChangeRequestsErrors,
      ThrowOnError
    >({
      url: "/organizations/{organization}/databases/{database}/branches/{branch}/changes",
      ...options,
    });
  }

  /**
   * Upsert a change request
   *
   * ### Authorization
   * A service token or OAuth token must have at least one of the following access or scopes in order to use this API endpoint:
   *
   * **Service Token Accesses**
   * `write_database`
   *
   * **OAuth Scopes**
   *
   * | Resource | Scopes |
   * | :------- | :---------- |
   * | Organization | `write_databases` |
   * | Database | `write_database` |
   */
  public updateBranchChangeRequest<ThrowOnError extends boolean = true>(
    options: Options<UpdateBranchChangeRequestData, ThrowOnError>,
  ) {
    return (options.client ?? this._client).patch<
      UpdateBranchChangeRequestResponses,
      UpdateBranchChangeRequestErrors,
      ThrowOnError
    >({
      url: "/organizations/{organization}/databases/{database}/branches/{branch}/changes",
      ...options,
      headers: {
        "Content-Type": "application/json",
        ...options.headers,
      },
    });
  }

  /**
   * List cluster extensions
   *
   * ### Authorization
   * A service token or OAuth token must have at least one of the following access or scopes in order to use this API endpoint:
   *
   * **Service Token Accesses**
   * `read_branch`, `delete_branch`, `create_branch`, `connect_production_branch`, `connect_branch`
   *
   * **OAuth Scopes**
   *
   * | Resource | Scopes |
   * | :------- | :---------- |
   * | Organization | `read_branches` |
   * | Database | `read_branches` |
   * | Branch | `read_branch` |
   */
  public listExtensions<ThrowOnError extends boolean = true>(
    options: Options<ListExtensionsData, ThrowOnError>,
  ) {
    return (options.client ?? this._client).get<
      ListExtensionsResponses,
      ListExtensionsErrors,
      ThrowOnError
    >({
      url: "/organizations/{organization}/databases/{database}/branches/{branch}/extensions",
      ...options,
    });
  }

  /**
   * Get keyspaces
   *
   *
   */
  public listKeyspaces<ThrowOnError extends boolean = true>(
    options: Options<ListKeyspacesData, ThrowOnError>,
  ) {
    return (options.client ?? this._client).get<
      ListKeyspacesResponses,
      ListKeyspacesErrors,
      ThrowOnError
    >({
      url: "/organizations/{organization}/databases/{database}/branches/{branch}/keyspaces",
      ...options,
    });
  }

  /**
   * Create a keyspace
   *
   *
   */
  public createKeyspace<ThrowOnError extends boolean = true>(
    options: Options<CreateKeyspaceData, ThrowOnError>,
  ) {
    return (options.client ?? this._client).post<
      CreateKeyspaceResponses,
      CreateKeyspaceErrors,
      ThrowOnError
    >({
      url: "/organizations/{organization}/databases/{database}/branches/{branch}/keyspaces",
      ...options,
      headers: {
        "Content-Type": "application/json",
        ...options.headers,
      },
    });
  }

  /**
   * Get the VSchema for the keyspace
   *
   * ### Authorization
   * A service token   must have at least one of the following access   in order to use this API endpoint:
   *
   * **Service Token Accesses**
   * `read_branch`, `delete_branch`, `create_branch`, `connect_production_branch`, `connect_branch`
   *
   *
   */
  public getKeyspaceVschema<ThrowOnError extends boolean = true>(
    options: Options<GetKeyspaceVschemaData, ThrowOnError>,
  ) {
    return (options.client ?? this._client).get<
      GetKeyspaceVschemaResponses,
      GetKeyspaceVschemaErrors,
      ThrowOnError
    >({
      url: "/organizations/{organization}/databases/{database}/branches/{branch}/keyspaces/{keyspace}/vschema",
      ...options,
    });
  }

  /**
   * Update the VSchema for the keyspace
   *
   * ### Authorization
   * A service token   must have at least one of the following access   in order to use this API endpoint:
   *
   * **Service Token Accesses**
   * `write_production_branch_vschema`, `write_branch_vschema`
   *
   *
   */
  public updateKeyspaceVschema<ThrowOnError extends boolean = true>(
    options: Options<UpdateKeyspaceVschemaData, ThrowOnError>,
  ) {
    return (options.client ?? this._client).patch<
      UpdateKeyspaceVschemaResponses,
      UpdateKeyspaceVschemaErrors,
      ThrowOnError
    >({
      url: "/organizations/{organization}/databases/{database}/branches/{branch}/keyspaces/{keyspace}/vschema",
      ...options,
      headers: {
        "Content-Type": "application/json",
        ...options.headers,
      },
    });
  }

  /**
   * Delete a keyspace
   *
   *
   */
  public deleteKeyspace<ThrowOnError extends boolean = true>(
    options: Options<DeleteKeyspaceData, ThrowOnError>,
  ) {
    return (options.client ?? this._client).delete<
      DeleteKeyspaceResponses,
      DeleteKeyspaceErrors,
      ThrowOnError
    >({
      url: "/organizations/{organization}/databases/{database}/branches/{branch}/keyspaces/{name}",
      ...options,
    });
  }

  /**
   * Get a keyspace
   *
   *
   */
  public getKeyspace<ThrowOnError extends boolean = true>(
    options: Options<GetKeyspaceData, ThrowOnError>,
  ) {
    return (options.client ?? this._client).get<
      GetKeyspaceResponses,
      GetKeyspaceErrors,
      ThrowOnError
    >({
      url: "/organizations/{organization}/databases/{database}/branches/{branch}/keyspaces/{name}",
      ...options,
    });
  }

  /**
   * Configure keyspace settings
   *
   *
   */
  public updateKeyspace<ThrowOnError extends boolean = true>(
    options: Options<UpdateKeyspaceData, ThrowOnError>,
  ) {
    return (options.client ?? this._client).patch<
      UpdateKeyspaceResponses,
      UpdateKeyspaceErrors,
      ThrowOnError
    >({
      url: "/organizations/{organization}/databases/{database}/branches/{branch}/keyspaces/{name}",
      ...options,
    });
  }

  /**
   * Get keyspace rollout status
   *
   *
   */
  public getKeyspaceRolloutStatus<ThrowOnError extends boolean = true>(
    options: Options<GetKeyspaceRolloutStatusData, ThrowOnError>,
  ) {
    return (options.client ?? this._client).get<
      GetKeyspaceRolloutStatusResponses,
      GetKeyspaceRolloutStatusErrors,
      ThrowOnError
    >({
      url: "/organizations/{organization}/databases/{database}/branches/{branch}/keyspaces/{name}/rollout-status",
      ...options,
    });
  }

  /**
   * List cluster parameters
   *
   * ### Authorization
   * A service token or OAuth token must have at least one of the following access or scopes in order to use this API endpoint:
   *
   * **Service Token Accesses**
   * `read_branch`, `delete_branch`, `create_branch`, `connect_production_branch`, `connect_branch`
   *
   * **OAuth Scopes**
   *
   * | Resource | Scopes |
   * | :------- | :---------- |
   * | Organization | `read_branches` |
   * | Database | `read_branches` |
   * | Branch | `read_branch` |
   */
  public listParameters<ThrowOnError extends boolean = true>(
    options: Options<ListParametersData, ThrowOnError>,
  ) {
    return (options.client ?? this._client).get<
      ListParametersResponses,
      ListParametersErrors,
      ThrowOnError
    >({
      url: "/organizations/{organization}/databases/{database}/branches/{branch}/parameters",
      ...options,
    });
  }

  /**
   * List passwords
   *
   * ### Authorization
   * A service token or OAuth token must have at least one of the following access or scopes in order to use this API endpoint:
   *
   * **Service Token Accesses**
   * `read_branch`, `delete_branch`, `create_branch`, `connect_production_branch`, `connect_branch`
   *
   * **OAuth Scopes**
   *
   * | Resource | Scopes |
   * | :------- | :---------- |
   * | Organization | `manage_passwords`, `manage_production_branch_passwords` |
   * | Database | `manage_passwords`, `manage_production_branch_passwords` |
   * | Branch | `manage_passwords` |
   */
  public listPasswords<ThrowOnError extends boolean = true>(
    options: Options<ListPasswordsData, ThrowOnError>,
  ) {
    return (options.client ?? this._client).get<
      ListPasswordsResponses,
      ListPasswordsErrors,
      ThrowOnError
    >({
      url: "/organizations/{organization}/databases/{database}/branches/{branch}/passwords",
      ...options,
    });
  }

  /**
   * Create a password
   *
   * ### Authorization
   * A service token or OAuth token must have at least one of the following access or scopes in order to use this API endpoint:
   *
   * **Service Token Accesses**
   * `connect_production_branch`, `connect_branch`
   *
   * **OAuth Scopes**
   *
   * | Resource | Scopes |
   * | :------- | :---------- |
   * | Organization | `manage_passwords`, `manage_production_branch_passwords` |
   * | Database | `manage_passwords`, `manage_production_branch_passwords` |
   * | Branch | `manage_passwords` |
   */
  public createPassword<ThrowOnError extends boolean = true>(
    options: Options<CreatePasswordData, ThrowOnError>,
  ) {
    return (options.client ?? this._client).post<
      CreatePasswordResponses,
      CreatePasswordErrors,
      ThrowOnError
    >({
      url: "/organizations/{organization}/databases/{database}/branches/{branch}/passwords",
      ...options,
      headers: {
        "Content-Type": "application/json",
        ...options.headers,
      },
    });
  }

  /**
   * Delete a password
   *
   * ### Authorization
   * A service token or OAuth token must have at least one of the following access or scopes in order to use this API endpoint:
   *
   * **Service Token Accesses**
   * `delete_production_branch_password`, `delete_branch_password`
   *
   * **OAuth Scopes**
   *
   * | Resource | Scopes |
   * | :------- | :---------- |
   * | Organization | `manage_passwords`, `manage_production_branch_passwords` |
   * | Database | `manage_passwords`, `manage_production_branch_passwords` |
   * | Branch | `manage_passwords` |
   */
  public deletePassword<ThrowOnError extends boolean = true>(
    options: Options<DeletePasswordData, ThrowOnError>,
  ) {
    return (options.client ?? this._client).delete<
      DeletePasswordResponses,
      DeletePasswordErrors,
      ThrowOnError
    >({
      url: "/organizations/{organization}/databases/{database}/branches/{branch}/passwords/{id}",
      ...options,
    });
  }

  /**
   * Get a password
   *
   * ### Authorization
   * A service token or OAuth token must have at least one of the following access or scopes in order to use this API endpoint:
   *
   * **Service Token Accesses**
   * `read_branch`, `delete_branch`, `create_branch`, `connect_production_branch`, `connect_branch`
   *
   * **OAuth Scopes**
   *
   * | Resource | Scopes |
   * | :------- | :---------- |
   * | Organization | `manage_passwords`, `manage_production_branch_passwords` |
   * | Database | `manage_passwords`, `manage_production_branch_passwords` |
   * | Branch | `manage_passwords` |
   */
  public getPassword<ThrowOnError extends boolean = true>(
    options: Options<GetPasswordData, ThrowOnError>,
  ) {
    return (options.client ?? this._client).get<
      GetPasswordResponses,
      GetPasswordErrors,
      ThrowOnError
    >({
      url: "/organizations/{organization}/databases/{database}/branches/{branch}/passwords/{id}",
      ...options,
    });
  }

  /**
   * Update a password
   *
   * ### Authorization
   * A service token or OAuth token must have at least one of the following access or scopes in order to use this API endpoint:
   *
   * **Service Token Accesses**
   * `connect_production_branch`, `connect_branch`
   *
   * **OAuth Scopes**
   *
   * | Resource | Scopes |
   * | :------- | :---------- |
   * | Organization | `manage_passwords`, `manage_production_branch_passwords` |
   * | Database | `manage_passwords`, `manage_production_branch_passwords` |
   * | Branch | `manage_passwords` |
   */
  public updatePassword<ThrowOnError extends boolean = true>(
    options: Options<UpdatePasswordData, ThrowOnError>,
  ) {
    return (options.client ?? this._client).patch<
      UpdatePasswordResponses,
      UpdatePasswordErrors,
      ThrowOnError
    >({
      url: "/organizations/{organization}/databases/{database}/branches/{branch}/passwords/{id}",
      ...options,
      headers: {
        "Content-Type": "application/json",
        ...options.headers,
      },
    });
  }

  /**
   * Renew a password
   *
   * ### Authorization
   * A service token or OAuth token must have at least one of the following access or scopes in order to use this API endpoint:
   *
   * **Service Token Accesses**
   * `connect_production_branch`, `connect_branch`
   *
   * **OAuth Scopes**
   *
   * | Resource | Scopes |
   * | :------- | :---------- |
   * | Organization | `manage_passwords`, `manage_production_branch_passwords` |
   * | Database | `manage_passwords`, `manage_production_branch_passwords` |
   * | Branch | `manage_passwords` |
   */
  public renewPassword<ThrowOnError extends boolean = true>(
    options: Options<RenewPasswordData, ThrowOnError>,
  ) {
    return (options.client ?? this._client).post<
      RenewPasswordResponses,
      RenewPasswordErrors,
      ThrowOnError
    >({
      url: "/organizations/{organization}/databases/{database}/branches/{branch}/passwords/{id}/renew",
      ...options,
    });
  }

  /**
   * List generated query patterns reports
   *
   * ### Authorization
   * A service token or OAuth token must have at least one of the following access or scopes in order to use this API endpoint:
   *
   * **Service Token Accesses**
   * `read_branch`
   *
   * **OAuth Scopes**
   *
   * | Resource | Scopes |
   * | :------- | :---------- |
   * | Organization | `read_branches` |
   * | Database | `read_branches` |
   * | Branch | `read_branch` |
   */
  public listGeneratedQueryPatternsReports<ThrowOnError extends boolean = true>(
    options: Options<ListGeneratedQueryPatternsReportsData, ThrowOnError>,
  ) {
    return (options.client ?? this._client).get<
      ListGeneratedQueryPatternsReportsResponses,
      ListGeneratedQueryPatternsReportsErrors,
      ThrowOnError
    >({
      url: "/organizations/{organization}/databases/{database}/branches/{branch}/query-patterns",
      ...options,
    });
  }

  /**
   * Create a new query patterns report
   *
   * ### Authorization
   * A service token or OAuth token must have at least one of the following access or scopes in order to use this API endpoint:
   *
   * **Service Token Accesses**
   * `read_branch`
   *
   * **OAuth Scopes**
   *
   * | Resource | Scopes |
   * | :------- | :---------- |
   * | Organization | `read_branches` |
   * | Database | `read_branches` |
   * | Branch | `read_branch` |
   */
  public createQueryPatternsReport<ThrowOnError extends boolean = true>(
    options: Options<CreateQueryPatternsReportData, ThrowOnError>,
  ) {
    return (options.client ?? this._client).post<
      CreateQueryPatternsReportResponses,
      CreateQueryPatternsReportErrors,
      ThrowOnError
    >({
      url: "/organizations/{organization}/databases/{database}/branches/{branch}/query-patterns",
      ...options,
    });
  }

  /**
   * Delete a query patterns report
   *
   * ### Authorization
   * A service token or OAuth token must have at least one of the following access or scopes in order to use this API endpoint:
   *
   * **Service Token Accesses**
   * `read_branch`
   *
   * **OAuth Scopes**
   *
   * | Resource | Scopes |
   * | :------- | :---------- |
   * | Organization | `read_branches` |
   * | Database | `read_branches` |
   * | Branch | `read_branch` |
   */
  public deleteQueryPatternsReport<ThrowOnError extends boolean = true>(
    options: Options<DeleteQueryPatternsReportData, ThrowOnError>,
  ) {
    return (options.client ?? this._client).delete<
      DeleteQueryPatternsReportResponses,
      DeleteQueryPatternsReportErrors,
      ThrowOnError
    >({
      url: "/organizations/{organization}/databases/{database}/branches/{branch}/query-patterns/{id}",
      ...options,
    });
  }

  /**
   * Show the status of a query patterns report
   *
   * ### Authorization
   * A service token or OAuth token must have at least one of the following access or scopes in order to use this API endpoint:
   *
   * **Service Token Accesses**
   * `read_branch`
   *
   * **OAuth Scopes**
   *
   * | Resource | Scopes |
   * | :------- | :---------- |
   * | Organization | `read_branches` |
   * | Database | `read_branches` |
   * | Branch | `read_branch` |
   */
  public getQueryPatternsReportStatus<ThrowOnError extends boolean = true>(
    options: Options<GetQueryPatternsReportStatusData, ThrowOnError>,
  ) {
    return (options.client ?? this._client).get<
      GetQueryPatternsReportStatusResponses,
      GetQueryPatternsReportStatusErrors,
      ThrowOnError
    >({
      url: "/organizations/{organization}/databases/{database}/branches/{branch}/query-patterns/{id}",
      ...options,
    });
  }

  /**
   * Download a finished query patterns report
   *
   * ### Authorization
   * A service token or OAuth token must have at least one of the following access or scopes in order to use this API endpoint:
   *
   * **Service Token Accesses**
   * `read_branch`
   *
   * **OAuth Scopes**
   *
   * | Resource | Scopes |
   * | :------- | :---------- |
   * | Organization | `read_branches` |
   * | Database | `read_branches` |
   * | Branch | `read_branch` |
   */
  public getQueryPatternsReport<ThrowOnError extends boolean = true>(
    options: Options<GetQueryPatternsReportData, ThrowOnError>,
  ) {
    return (options.client ?? this._client).get<
      unknown,
      GetQueryPatternsReportErrors,
      ThrowOnError
    >({
      url: "/organizations/{organization}/databases/{database}/branches/{branch}/query-patterns/{id}/download",
      ...options,
    });
  }

  /**
   * Cancel a change request
   *
   * ### Authorization
   * A service token or OAuth token must have at least one of the following access or scopes in order to use this API endpoint:
   *
   * **Service Token Accesses**
   * `write_database`
   *
   * **OAuth Scopes**
   *
   * | Resource | Scopes |
   * | :------- | :---------- |
   * | Organization | `write_databases` |
   * | Database | `write_database` |
   */
  public cancelBranchChangeRequest<ThrowOnError extends boolean = true>(
    options: Options<CancelBranchChangeRequestData, ThrowOnError>,
  ) {
    return (options.client ?? this._client).delete<
      CancelBranchChangeRequestResponses,
      CancelBranchChangeRequestErrors,
      ThrowOnError
    >({
      url: "/organizations/{organization}/databases/{database}/branches/{branch}/resizes",
      ...options,
    });
  }

  /**
   * List roles
   *
   * ### Authorization
   * A service token or OAuth token must have at least one of the following access or scopes in order to use this API endpoint:
   *
   * **Service Token Accesses**
   * `read_branch`, `delete_branch`, `create_branch`, `connect_production_branch`, `connect_branch`
   *
   * **OAuth Scopes**
   *
   * | Resource | Scopes |
   * | :------- | :---------- |
   * | Organization | `manage_passwords`, `manage_production_branch_passwords` |
   * | Database | `manage_passwords`, `manage_production_branch_passwords` |
   * | Branch | `manage_passwords` |
   */
  public listRoles<ThrowOnError extends boolean = true>(
    options: Options<ListRolesData, ThrowOnError>,
  ) {
    return (options.client ?? this._client).get<
      ListRolesResponses,
      ListRolesErrors,
      ThrowOnError
    >({
      url: "/organizations/{organization}/databases/{database}/branches/{branch}/roles",
      ...options,
    });
  }

  /**
   * Create role credentials
   *
   * ### Authorization
   * A service token or OAuth token must have at least one of the following access or scopes in order to use this API endpoint:
   *
   * **Service Token Accesses**
   * `create_production_branch_password`, `create_branch_password`
   *
   * **OAuth Scopes**
   *
   * | Resource | Scopes |
   * | :------- | :---------- |
   * | Organization | `manage_passwords`, `manage_production_branch_passwords` |
   * | Database | `manage_passwords`, `manage_production_branch_passwords` |
   * | Branch | `manage_passwords` |
   */
  public createRole<ThrowOnError extends boolean = true>(
    options: Options<CreateRoleData, ThrowOnError>,
  ) {
    return (options.client ?? this._client).post<
      CreateRoleResponses,
      CreateRoleErrors,
      ThrowOnError
    >({
      url: "/organizations/{organization}/databases/{database}/branches/{branch}/roles",
      ...options,
      headers: {
        "Content-Type": "application/json",
        ...options.headers,
      },
    });
  }

  /**
   * Delete role credentials
   *
   * ### Authorization
   * A service token or OAuth token must have at least one of the following access or scopes in order to use this API endpoint:
   *
   * **Service Token Accesses**
   * `delete_production_branch_password`, `delete_branch_password`
   *
   * **OAuth Scopes**
   *
   * | Resource | Scopes |
   * | :------- | :---------- |
   * | Organization | `manage_passwords`, `manage_production_branch_passwords` |
   * | Database | `manage_passwords`, `manage_production_branch_passwords` |
   * | Branch | `manage_passwords` |
   */
  public deleteRole<ThrowOnError extends boolean = true>(
    options: Options<DeleteRoleData, ThrowOnError>,
  ) {
    return (options.client ?? this._client).delete<
      DeleteRoleResponses,
      DeleteRoleErrors,
      ThrowOnError
    >({
      url: "/organizations/{organization}/databases/{database}/branches/{branch}/roles/{id}",
      ...options,
      headers: {
        "Content-Type": "application/json",
        ...options.headers,
      },
    });
  }

  /**
   * Get a role
   *
   * ### Authorization
   * A service token or OAuth token must have at least one of the following access or scopes in order to use this API endpoint:
   *
   * **Service Token Accesses**
   * `read_branch`, `delete_branch`, `create_branch`, `connect_production_branch`, `connect_branch`
   *
   * **OAuth Scopes**
   *
   * | Resource | Scopes |
   * | :------- | :---------- |
   * | Organization | `manage_passwords`, `manage_production_branch_passwords` |
   * | Database | `manage_passwords`, `manage_production_branch_passwords` |
   * | Branch | `manage_passwords` |
   */
  public getRole<ThrowOnError extends boolean = true>(
    options: Options<GetRoleData, ThrowOnError>,
  ) {
    return (options.client ?? this._client).get<
      GetRoleResponses,
      GetRoleErrors,
      ThrowOnError
    >({
      url: "/organizations/{organization}/databases/{database}/branches/{branch}/roles/{id}",
      ...options,
    });
  }

  /**
   * Update role name
   *
   * ### Authorization
   * A service token or OAuth token must have at least one of the following access or scopes in order to use this API endpoint:
   *
   * **Service Token Accesses**
   * `create_production_branch_password`, `create_branch_password`
   *
   * **OAuth Scopes**
   *
   * | Resource | Scopes |
   * | :------- | :---------- |
   * | Organization | `manage_passwords`, `manage_production_branch_passwords` |
   * | Database | `manage_passwords`, `manage_production_branch_passwords` |
   * | Branch | `manage_passwords` |
   */
  public updateRole<ThrowOnError extends boolean = true>(
    options: Options<UpdateRoleData, ThrowOnError>,
  ) {
    return (options.client ?? this._client).patch<
      UpdateRoleResponses,
      UpdateRoleErrors,
      ThrowOnError
    >({
      url: "/organizations/{organization}/databases/{database}/branches/{branch}/roles/{id}",
      ...options,
      headers: {
        "Content-Type": "application/json",
        ...options.headers,
      },
    });
  }

  /**
   * Renew role expiration
   *
   * ### Authorization
   * A service token or OAuth token must have at least one of the following access or scopes in order to use this API endpoint:
   *
   * **Service Token Accesses**
   * `create_production_branch_password`, `create_branch_password`
   *
   * **OAuth Scopes**
   *
   * | Resource | Scopes |
   * | :------- | :---------- |
   * | Organization | `manage_passwords`, `manage_production_branch_passwords` |
   * | Database | `manage_passwords`, `manage_production_branch_passwords` |
   * | Branch | `manage_passwords` |
   */
  public renewRole<ThrowOnError extends boolean = true>(
    options: Options<RenewRoleData, ThrowOnError>,
  ) {
    return (options.client ?? this._client).post<
      RenewRoleResponses,
      RenewRoleErrors,
      ThrowOnError
    >({
      url: "/organizations/{organization}/databases/{database}/branches/{branch}/roles/{id}/renew",
      ...options,
    });
  }

  /**
   * Delete a branch
   *
   * ### Authorization
   * A service token or OAuth token must have at least one of the following access or scopes in order to use this API endpoint:
   *
   * **Service Token Accesses**
   * `delete_branch`
   *
   * **OAuth Scopes**
   *
   * | Resource | Scopes |
   * | :------- | :---------- |
   * | Organization | `delete_branches`, `delete_production_branches` |
   * | Database | `delete_branches`, `delete_production_branches` |
   * | Branch | `delete_branch` |
   */
  public deleteBranch<ThrowOnError extends boolean = true>(
    options: Options<DeleteBranchData, ThrowOnError>,
  ) {
    return (options.client ?? this._client).delete<
      DeleteBranchResponses,
      DeleteBranchErrors,
      ThrowOnError
    >({
      url: "/organizations/{organization}/databases/{database}/branches/{name}",
      ...options,
    });
  }

  /**
   * Get a branch
   *
   * ### Authorization
   * A service token or OAuth token must have at least one of the following access or scopes in order to use this API endpoint:
   *
   * **Service Token Accesses**
   * `read_branch`, `delete_branch`, `create_branch`, `connect_production_branch`, `connect_branch`
   *
   * **OAuth Scopes**
   *
   * | Resource | Scopes |
   * | :------- | :---------- |
   * | Organization | `read_branches` |
   * | Database | `read_branches` |
   * | Branch | `read_branch` |
   */
  public getBranch<ThrowOnError extends boolean = true>(
    options: Options<GetBranchData, ThrowOnError>,
  ) {
    return (options.client ?? this._client).get<
      GetBranchResponses,
      GetBranchErrors,
      ThrowOnError
    >({
      url: "/organizations/{organization}/databases/{database}/branches/{name}",
      ...options,
    });
  }

  /**
   * Change a branch cluster configuration
   *
   * ### Authorization
   * A service token   must have at least one of the following access   in order to use this API endpoint:
   *
   * **Service Token Accesses**
   * `write_database`
   *
   *
   */
  public updateBranchClusterConfig<ThrowOnError extends boolean = true>(
    options: Options<UpdateBranchClusterConfigData, ThrowOnError>,
  ) {
    return (options.client ?? this._client).patch<
      UpdateBranchClusterConfigResponses,
      UpdateBranchClusterConfigErrors,
      ThrowOnError
    >({
      url: "/organizations/{organization}/databases/{database}/branches/{name}/cluster",
      ...options,
      headers: {
        "Content-Type": "application/json",
        ...options.headers,
      },
    });
  }

  /**
   * Demote a branch
   * Demotes a branch from production to development
   * ### Authorization
   * A service token or OAuth token must have at least one of the following access or scopes in order to use this API endpoint:
   *
   * **Service Token Accesses**
   * `connect_production_branch`, `demote_branches`
   *
   * **OAuth Scopes**
   *
   * | Resource | Scopes |
   * | :------- | :---------- |
   * | Organization | `demote_branches` |
   * | Database | `demote_branches` |
   */
  public demoteBranch<ThrowOnError extends boolean = true>(
    options: Options<DemoteBranchData, ThrowOnError>,
  ) {
    return (options.client ?? this._client).post<
      DemoteBranchResponses,
      DemoteBranchErrors,
      ThrowOnError
    >({
      url: "/organizations/{organization}/databases/{database}/branches/{name}/demote",
      ...options,
    });
  }

  /**
   * Promote a branch
   * Promotes a branch from development to production
   * ### Authorization
   * A service token or OAuth token must have at least one of the following access or scopes in order to use this API endpoint:
   *
   * **Service Token Accesses**
   * `connect_production_branch`, `promote_branches`
   *
   * **OAuth Scopes**
   *
   * | Resource | Scopes |
   * | :------- | :---------- |
   * | Organization | `promote_branches` |
   * | Database | `promote_branches` |
   */
  public promoteBranch<ThrowOnError extends boolean = true>(
    options: Options<PromoteBranchData, ThrowOnError>,
  ) {
    return (options.client ?? this._client).post<
      PromoteBranchResponses,
      PromoteBranchErrors,
      ThrowOnError
    >({
      url: "/organizations/{organization}/databases/{database}/branches/{name}/promote",
      ...options,
    });
  }

  /**
   * Disable safe migrations for a branch
   *
   *
   */
  public disableSafeMigrations<ThrowOnError extends boolean = true>(
    options: Options<DisableSafeMigrationsData, ThrowOnError>,
  ) {
    return (options.client ?? this._client).delete<
      DisableSafeMigrationsResponses,
      DisableSafeMigrationsErrors,
      ThrowOnError
    >({
      url: "/organizations/{organization}/databases/{database}/branches/{name}/safe-migrations",
      ...options,
    });
  }

  /**
   * Enable safe migrations for a branch
   *
   *
   */
  public enableSafeMigrations<ThrowOnError extends boolean = true>(
    options: Options<EnableSafeMigrationsData, ThrowOnError>,
  ) {
    return (options.client ?? this._client).post<
      EnableSafeMigrationsResponses,
      EnableSafeMigrationsErrors,
      ThrowOnError
    >({
      url: "/organizations/{organization}/databases/{database}/branches/{name}/safe-migrations",
      ...options,
    });
  }

  /**
   * Get a branch schema
   *
   * ### Authorization
   * A service token or OAuth token must have at least one of the following access or scopes in order to use this API endpoint:
   *
   * **Service Token Accesses**
   * `read_branch`, `delete_branch`, `create_branch`, `connect_production_branch`, `connect_branch`
   *
   * **OAuth Scopes**
   *
   * | Resource | Scopes |
   * | :------- | :---------- |
   * | Organization | `read_branches` |
   * | Database | `read_branches` |
   * | Branch | `read_branch` |
   */
  public getBranchSchema<ThrowOnError extends boolean = true>(
    options: Options<GetBranchSchemaData, ThrowOnError>,
  ) {
    return (options.client ?? this._client).get<
      GetBranchSchemaResponses,
      GetBranchSchemaErrors,
      ThrowOnError
    >({
      url: "/organizations/{organization}/databases/{database}/branches/{name}/schema",
      ...options,
    });
  }

  /**
   * Lint a branch schema
   *
   * ### Authorization
   * A service token or OAuth token must have at least one of the following access or scopes in order to use this API endpoint:
   *
   * **Service Token Accesses**
   * `read_branch`, `delete_branch`, `create_branch`, `connect_production_branch`, `connect_branch`
   *
   * **OAuth Scopes**
   *
   * | Resource | Scopes |
   * | :------- | :---------- |
   * | Organization | `read_branches` |
   * | Database | `read_branches` |
   * | Branch | `read_branch` |
   */
  public lintBranchSchema<ThrowOnError extends boolean = true>(
    options: Options<LintBranchSchemaData, ThrowOnError>,
  ) {
    return (options.client ?? this._client).get<
      LintBranchSchemaResponses,
      LintBranchSchemaErrors,
      ThrowOnError
    >({
      url: "/organizations/{organization}/databases/{database}/branches/{name}/schema/lint",
      ...options,
    });
  }

  /**
   * Get the deploy queue
   * The deploy queue returns the current list of deploy requests in the order they will be deployed.
   *
   */
  public getDeployQueue<ThrowOnError extends boolean = true>(
    options: Options<GetDeployQueueData, ThrowOnError>,
  ) {
    return (options.client ?? this._client).get<
      GetDeployQueueResponses,
      GetDeployQueueErrors,
      ThrowOnError
    >({
      url: "/organizations/{organization}/databases/{database}/deploy-queue",
      ...options,
    });
  }

  /**
   * List deploy requests
   * List deploy requests for a database
   * ### Authorization
   * A service token or OAuth token must have at least one of the following access or scopes in order to use this API endpoint:
   *
   * **Service Token Accesses**
   * `read_deploy_request`
   *
   * **OAuth Scopes**
   *
   * | Resource | Scopes |
   * | :------- | :---------- |
   * | Organization | `read_deploy_requests` |
   * | Database | `read_deploy_requests` |
   */
  public listDeployRequests<ThrowOnError extends boolean = true>(
    options: Options<ListDeployRequestsData, ThrowOnError>,
  ) {
    return (options.client ?? this._client).get<
      ListDeployRequestsResponses,
      ListDeployRequestsErrors,
      ThrowOnError
    >({
      url: "/organizations/{organization}/databases/{database}/deploy-requests",
      ...options,
    });
  }

  /**
   * Create a deploy request
   *
   * ### Authorization
   * A service token or OAuth token must have at least one of the following access or scopes in order to use this API endpoint:
   *
   * **Service Token Accesses**
   * `read_deploy_request`, `create_deploy_requests`
   *
   * **OAuth Scopes**
   *
   * | Resource | Scopes |
   * | :------- | :---------- |
   * | Organization | `write_deploy_requests` |
   * | Database | `write_deploy_requests` |
   */
  public createDeployRequest<ThrowOnError extends boolean = true>(
    options: Options<CreateDeployRequestData, ThrowOnError>,
  ) {
    return (options.client ?? this._client).post<
      CreateDeployRequestResponses,
      CreateDeployRequestErrors,
      ThrowOnError
    >({
      url: "/organizations/{organization}/databases/{database}/deploy-requests",
      ...options,
      headers: {
        "Content-Type": "application/json",
        ...options.headers,
      },
    });
  }

  /**
   * Get a deploy request
   *
   * ### Authorization
   * A service token or OAuth token must have at least one of the following access or scopes in order to use this API endpoint:
   *
   * **Service Token Accesses**
   * `read_deploy_request`
   *
   * **OAuth Scopes**
   *
   * | Resource | Scopes |
   * | :------- | :---------- |
   * | Organization | `read_deploy_requests` |
   * | Database | `read_deploy_requests` |
   */
  public getDeployRequest<ThrowOnError extends boolean = true>(
    options: Options<GetDeployRequestData, ThrowOnError>,
  ) {
    return (options.client ?? this._client).get<
      GetDeployRequestResponses,
      GetDeployRequestErrors,
      ThrowOnError
    >({
      url: "/organizations/{organization}/databases/{database}/deploy-requests/{number}",
      ...options,
    });
  }

  /**
   * Close a deploy request
   *
   * ### Authorization
   * A service token or OAuth token must have at least one of the following access or scopes in order to use this API endpoint:
   *
   * **Service Token Accesses**
   * `read_deploy_request`
   *
   * **OAuth Scopes**
   *
   * | Resource | Scopes |
   * | :------- | :---------- |
   * | Organization | `write_deploy_requests` |
   * | Database | `write_deploy_requests` |
   */
  public closeDeployRequest<ThrowOnError extends boolean = true>(
    options: Options<CloseDeployRequestData, ThrowOnError>,
  ) {
    return (options.client ?? this._client).patch<
      CloseDeployRequestResponses,
      CloseDeployRequestErrors,
      ThrowOnError
    >({
      url: "/organizations/{organization}/databases/{database}/deploy-requests/{number}",
      ...options,
      headers: {
        "Content-Type": "application/json",
        ...options.headers,
      },
    });
  }

  /**
   * Complete a gated deploy request
   *
   * ### Authorization
   * A service token or OAuth token must have at least one of the following access or scopes in order to use this API endpoint:
   *
   * **Service Token Accesses**
   * `read_deploy_request`, `create_deploy_request`
   *
   * **OAuth Scopes**
   *
   * | Resource | Scopes |
   * | :------- | :---------- |
   * | Organization | `deploy_deploy_requests` |
   * | Database | `deploy_deploy_requests` |
   */
  public completeGatedDeployRequest<ThrowOnError extends boolean = true>(
    options: Options<CompleteGatedDeployRequestData, ThrowOnError>,
  ) {
    return (options.client ?? this._client).post<
      CompleteGatedDeployRequestResponses,
      CompleteGatedDeployRequestErrors,
      ThrowOnError
    >({
      url: "/organizations/{organization}/databases/{database}/deploy-requests/{number}/apply-deploy",
      ...options,
    });
  }

  /**
   * Update auto-apply for deploy request
   * Enables or disabled the auto-apply setting for a deploy request
   * ### Authorization
   * A service token or OAuth token must have at least one of the following access or scopes in order to use this API endpoint:
   *
   * **Service Token Accesses**
   * `read_deploy_request`, `create_deploy_request`
   *
   * **OAuth Scopes**
   *
   * | Resource | Scopes |
   * | :------- | :---------- |
   * | Organization | `deploy_deploy_requests` |
   * | Database | `deploy_deploy_requests` |
   */
  public updateAutoApply<ThrowOnError extends boolean = true>(
    options: Options<UpdateAutoApplyData, ThrowOnError>,
  ) {
    return (options.client ?? this._client).put<
      UpdateAutoApplyResponses,
      UpdateAutoApplyErrors,
      ThrowOnError
    >({
      url: "/organizations/{organization}/databases/{database}/deploy-requests/{number}/auto-apply",
      ...options,
      headers: {
        "Content-Type": "application/json",
        ...options.headers,
      },
    });
  }

  /**
   * Cancel a queued deploy request
   *
   * ### Authorization
   * A service token or OAuth token must have at least one of the following access or scopes in order to use this API endpoint:
   *
   * **Service Token Accesses**
   * `read_deploy_request`, `create_deploy_request`
   *
   * **OAuth Scopes**
   *
   * | Resource | Scopes |
   * | :------- | :---------- |
   * | Organization | `deploy_deploy_requests` |
   * | Database | `deploy_deploy_requests` |
   */
  public cancelDeployRequest<ThrowOnError extends boolean = true>(
    options: Options<CancelDeployRequestData, ThrowOnError>,
  ) {
    return (options.client ?? this._client).post<
      CancelDeployRequestResponses,
      CancelDeployRequestErrors,
      ThrowOnError
    >({
      url: "/organizations/{organization}/databases/{database}/deploy-requests/{number}/cancel",
      ...options,
    });
  }

  /**
   * Complete an errored deploy
   *
   * ### Authorization
   * A service token or OAuth token must have at least one of the following access or scopes in order to use this API endpoint:
   *
   * **Service Token Accesses**
   * `read_deploy_request`, `create_deploy_request`
   *
   * **OAuth Scopes**
   *
   * | Resource | Scopes |
   * | :------- | :---------- |
   * | Organization | `deploy_deploy_requests` |
   * | Database | `deploy_deploy_requests` |
   */
  public completeErroredDeploy<ThrowOnError extends boolean = true>(
    options: Options<CompleteErroredDeployData, ThrowOnError>,
  ) {
    return (options.client ?? this._client).post<
      CompleteErroredDeployResponses,
      CompleteErroredDeployErrors,
      ThrowOnError
    >({
      url: "/organizations/{organization}/databases/{database}/deploy-requests/{number}/complete-deploy",
      ...options,
    });
  }

  /**
   * Queue a deploy request
   *
   * ### Authorization
   * A service token or OAuth token must have at least one of the following access or scopes in order to use this API endpoint:
   *
   * **Service Token Accesses**
   * `read_deploy_request`, `create_deploy_request`
   *
   * **OAuth Scopes**
   *
   * | Resource | Scopes |
   * | :------- | :---------- |
   * | Organization | `deploy_deploy_requests` |
   * | Database | `deploy_deploy_requests` |
   */
  public queueDeployRequest<ThrowOnError extends boolean = true>(
    options: Options<QueueDeployRequestData, ThrowOnError>,
  ) {
    return (options.client ?? this._client).post<
      QueueDeployRequestResponses,
      QueueDeployRequestErrors,
      ThrowOnError
    >({
      url: "/organizations/{organization}/databases/{database}/deploy-requests/{number}/deploy",
      ...options,
      headers: {
        "Content-Type": "application/json",
        ...options.headers,
      },
    });
  }

  /**
   * Get a deployment
   * Get the deployment for a deploy request
   * ### Authorization
   * A service token or OAuth token must have at least one of the following access or scopes in order to use this API endpoint:
   *
   * **Service Token Accesses**
   * `read_deploy_request`
   *
   * **OAuth Scopes**
   *
   * | Resource | Scopes |
   * | :------- | :---------- |
   * | Organization | `read_deploy_requests` |
   * | Database | `read_deploy_requests` |
   */
  public getDeployment<ThrowOnError extends boolean = true>(
    options: Options<GetDeploymentData, ThrowOnError>,
  ) {
    return (options.client ?? this._client).get<
      GetDeploymentResponses,
      GetDeploymentErrors,
      ThrowOnError
    >({
      url: "/organizations/{organization}/databases/{database}/deploy-requests/{number}/deployment",
      ...options,
    });
  }

  /**
   * List deploy operations
   * List deploy operations for a deploy request
   * ### Authorization
   * A service token or OAuth token must have at least one of the following access or scopes in order to use this API endpoint:
   *
   * **Service Token Accesses**
   * `read_deploy_request`
   *
   * **OAuth Scopes**
   *
   * | Resource | Scopes |
   * | :------- | :---------- |
   * | Organization | `read_deploy_requests` |
   * | Database | `read_deploy_requests` |
   */
  public listDeployOperations<ThrowOnError extends boolean = true>(
    options: Options<ListDeployOperationsData, ThrowOnError>,
  ) {
    return (options.client ?? this._client).get<
      ListDeployOperationsResponses,
      ListDeployOperationsErrors,
      ThrowOnError
    >({
      url: "/organizations/{organization}/databases/{database}/deploy-requests/{number}/operations",
      ...options,
    });
  }

  /**
   * Complete a revert
   *
   * ### Authorization
   * A service token or OAuth token must have at least one of the following access or scopes in order to use this API endpoint:
   *
   * **Service Token Accesses**
   * `read_deploy_request`, `create_deploy_request`
   *
   * **OAuth Scopes**
   *
   * | Resource | Scopes |
   * | :------- | :---------- |
   * | Organization | `deploy_deploy_requests` |
   * | Database | `deploy_deploy_requests` |
   */
  public completeRevert<ThrowOnError extends boolean = true>(
    options: Options<CompleteRevertData, ThrowOnError>,
  ) {
    return (options.client ?? this._client).post<
      CompleteRevertResponses,
      CompleteRevertErrors,
      ThrowOnError
    >({
      url: "/organizations/{organization}/databases/{database}/deploy-requests/{number}/revert",
      ...options,
    });
  }

  /**
   * List deploy request reviews
   *
   * ### Authorization
   * A service token or OAuth token must have at least one of the following access or scopes in order to use this API endpoint:
   *
   * **Service Token Accesses**
   * `read_deploy_request`
   *
   * **OAuth Scopes**
   *
   * | Resource | Scopes |
   * | :------- | :---------- |
   * | Organization | `read_deploy_requests` |
   * | Database | `read_deploy_requests` |
   */
  public listDeployRequestReviews<ThrowOnError extends boolean = true>(
    options: Options<ListDeployRequestReviewsData, ThrowOnError>,
  ) {
    return (options.client ?? this._client).get<
      ListDeployRequestReviewsResponses,
      ListDeployRequestReviewsErrors,
      ThrowOnError
    >({
      url: "/organizations/{organization}/databases/{database}/deploy-requests/{number}/reviews",
      ...options,
    });
  }

  /**
   * Review a deploy request
   * Review a deploy request by either approving or commenting on the deploy request
   * ### Authorization
   * A service token or OAuth token must have at least one of the following access or scopes in order to use this API endpoint:
   *
   * **Service Token Accesses**
   * `approve_deploy_request`, `review_deploy_request`
   *
   * **OAuth Scopes**
   *
   * | Resource | Scopes |
   * | :------- | :---------- |
   * | Organization | `approve_deploy_requests` |
   * | Database | `approve_deploy_requests` |
   */
  public reviewDeployRequest<ThrowOnError extends boolean = true>(
    options: Options<ReviewDeployRequestData, ThrowOnError>,
  ) {
    return (options.client ?? this._client).post<
      ReviewDeployRequestResponses,
      ReviewDeployRequestErrors,
      ThrowOnError
    >({
      url: "/organizations/{organization}/databases/{database}/deploy-requests/{number}/reviews",
      ...options,
      headers: {
        "Content-Type": "application/json",
        ...options.headers,
      },
    });
  }

  /**
   * Skip revert period
   * Skips the revert period for a deploy request
   * ### Authorization
   * A service token or OAuth token must have at least one of the following access or scopes in order to use this API endpoint:
   *
   * **Service Token Accesses**
   * `read_deploy_request`, `create_deploy_request`
   *
   * **OAuth Scopes**
   *
   * | Resource | Scopes |
   * | :------- | :---------- |
   * | Organization | `deploy_deploy_requests` |
   * | Database | `deploy_deploy_requests` |
   */
  public skipRevertPeriod<ThrowOnError extends boolean = true>(
    options: Options<SkipRevertPeriodData, ThrowOnError>,
  ) {
    return (options.client ?? this._client).post<
      SkipRevertPeriodResponses,
      SkipRevertPeriodErrors,
      ThrowOnError
    >({
      url: "/organizations/{organization}/databases/{database}/deploy-requests/{number}/skip-revert",
      ...options,
    });
  }

  /**
   * Get deploy request throttler configurations
   *
   * ### Authorization
   * A service token or OAuth token must have at least one of the following access or scopes in order to use this API endpoint:
   *
   * **Service Token Accesses**
   * `read_deploy_request`
   *
   * **OAuth Scopes**
   *
   * | Resource | Scopes |
   * | :------- | :---------- |
   * | Organization | `read_deploy_requests` |
   * | Database | `read_deploy_requests` |
   */
  public getDeployRequestThrottler<ThrowOnError extends boolean = true>(
    options: Options<GetDeployRequestThrottlerData, ThrowOnError>,
  ) {
    return (options.client ?? this._client).get<
      GetDeployRequestThrottlerResponses,
      GetDeployRequestThrottlerErrors,
      ThrowOnError
    >({
      url: "/organizations/{organization}/databases/{database}/deploy-requests/{number}/throttler",
      ...options,
    });
  }

  /**
   * Update deploy request throttler configurations
   *
   * ### Authorization
   * A service token or OAuth token must have at least one of the following access or scopes in order to use this API endpoint:
   *
   * **Service Token Accesses**
   * `read_deploy_request`, `create_deploy_request`
   *
   * **OAuth Scopes**
   *
   * | Resource | Scopes |
   * | :------- | :---------- |
   * | Organization | `deploy_deploy_requests` |
   * | Database | `deploy_deploy_requests` |
   */
  public updateDeployRequestThrottler<ThrowOnError extends boolean = true>(
    options: Options<UpdateDeployRequestThrottlerData, ThrowOnError>,
  ) {
    return (options.client ?? this._client).patch<
      UpdateDeployRequestThrottlerResponses,
      UpdateDeployRequestThrottlerErrors,
      ThrowOnError
    >({
      url: "/organizations/{organization}/databases/{database}/deploy-requests/{number}/throttler",
      ...options,
      headers: {
        "Content-Type": "application/json",
        ...options.headers,
      },
    });
  }

  /**
   * Get database throttler configurations
   *
   * ### Authorization
   * A service token or OAuth token must have at least one of the following access or scopes in order to use this API endpoint:
   *
   * **Service Token Accesses**
   * `read_deploy_request`, `create_deploy_request`
   *
   * **OAuth Scopes**
   *
   * | Resource | Scopes |
   * | :------- | :---------- |
   * | Organization | `read_databases` |
   * | Database | `read_database` |
   */
  public getDatabaseThrottler<ThrowOnError extends boolean = true>(
    options: Options<GetDatabaseThrottlerData, ThrowOnError>,
  ) {
    return (options.client ?? this._client).get<
      GetDatabaseThrottlerResponses,
      GetDatabaseThrottlerErrors,
      ThrowOnError
    >({
      url: "/organizations/{organization}/databases/{database}/throttler",
      ...options,
    });
  }

  /**
   * Update database throttler configurations
   *
   * ### Authorization
   * A service token or OAuth token must have at least one of the following access or scopes in order to use this API endpoint:
   *
   * **Service Token Accesses**
   * `read_deploy_request`, `create_deploy_request`
   *
   * **OAuth Scopes**
   *
   * | Resource | Scopes |
   * | :------- | :---------- |
   * | Organization | `deploy_deploy_requests` |
   * | Database | `deploy_deploy_requests` |
   */
  public updateDatabaseThrottler<ThrowOnError extends boolean = true>(
    options: Options<UpdateDatabaseThrottlerData, ThrowOnError>,
  ) {
    return (options.client ?? this._client).patch<
      UpdateDatabaseThrottlerResponses,
      UpdateDatabaseThrottlerErrors,
      ThrowOnError
    >({
      url: "/organizations/{organization}/databases/{database}/throttler",
      ...options,
      headers: {
        "Content-Type": "application/json",
        ...options.headers,
      },
    });
  }

  /**
   * List webhooks
   * List webhooks for a database
   * ### Authorization
   * A service token or OAuth token must have at least one of the following access or scopes in order to use this API endpoint:
   *
   * **Service Token Accesses**
   * `read_database`
   *
   * **OAuth Scopes**
   *
   * | Resource | Scopes |
   * | :------- | :---------- |
   * | Organization | `read_databases` |
   * | Database | `read_database` |
   */
  public listWebhooks<ThrowOnError extends boolean = true>(
    options: Options<ListWebhooksData, ThrowOnError>,
  ) {
    return (options.client ?? this._client).get<
      ListWebhooksResponses,
      ListWebhooksErrors,
      ThrowOnError
    >({
      url: "/organizations/{organization}/databases/{database}/webhooks",
      ...options,
    });
  }

  /**
   * Create a webhook
   *
   * ### Authorization
   * A service token or OAuth token must have at least one of the following access or scopes in order to use this API endpoint:
   *
   * **Service Token Accesses**
   * `write_database`
   *
   * **OAuth Scopes**
   *
   * | Resource | Scopes |
   * | :------- | :---------- |
   * | Organization | `write_databases` |
   * | Database | `write_database` |
   */
  public createWebhook<ThrowOnError extends boolean = true>(
    options: Options<CreateWebhookData, ThrowOnError>,
  ) {
    return (options.client ?? this._client).post<
      CreateWebhookResponses,
      CreateWebhookErrors,
      ThrowOnError
    >({
      url: "/organizations/{organization}/databases/{database}/webhooks",
      ...options,
      headers: {
        "Content-Type": "application/json",
        ...options.headers,
      },
    });
  }

  /**
   * Delete a webhook
   *
   * ### Authorization
   * A service token or OAuth token must have at least one of the following access or scopes in order to use this API endpoint:
   *
   * **Service Token Accesses**
   * `write_database`
   *
   * **OAuth Scopes**
   *
   * | Resource | Scopes |
   * | :------- | :---------- |
   * | Organization | `write_databases` |
   * | Database | `write_database` |
   */
  public deleteWebhook<ThrowOnError extends boolean = true>(
    options: Options<DeleteWebhookData, ThrowOnError>,
  ) {
    return (options.client ?? this._client).delete<
      DeleteWebhookResponses,
      DeleteWebhookErrors,
      ThrowOnError
    >({
      url: "/organizations/{organization}/databases/{database}/webhooks/{id}",
      ...options,
    });
  }

  /**
   * Get a webhook
   *
   * ### Authorization
   * A service token or OAuth token must have at least one of the following access or scopes in order to use this API endpoint:
   *
   * **Service Token Accesses**
   * `read_database`
   *
   * **OAuth Scopes**
   *
   * | Resource | Scopes |
   * | :------- | :---------- |
   * | Organization | `read_databases` |
   * | Database | `read_database` |
   */
  public getWebhook<ThrowOnError extends boolean = true>(
    options: Options<GetWebhookData, ThrowOnError>,
  ) {
    return (options.client ?? this._client).get<
      GetWebhookResponses,
      GetWebhookErrors,
      ThrowOnError
    >({
      url: "/organizations/{organization}/databases/{database}/webhooks/{id}",
      ...options,
    });
  }

  /**
   * Update a webhook
   *
   * ### Authorization
   * A service token or OAuth token must have at least one of the following access or scopes in order to use this API endpoint:
   *
   * **Service Token Accesses**
   * `write_database`
   *
   * **OAuth Scopes**
   *
   * | Resource | Scopes |
   * | :------- | :---------- |
   * | Organization | `write_databases` |
   * | Database | `write_database` |
   */
  public updateWebhook<ThrowOnError extends boolean = true>(
    options: Options<UpdateWebhookData, ThrowOnError>,
  ) {
    return (options.client ?? this._client).patch<
      UpdateWebhookResponses,
      UpdateWebhookErrors,
      ThrowOnError
    >({
      url: "/organizations/{organization}/databases/{database}/webhooks/{id}",
      ...options,
      headers: {
        "Content-Type": "application/json",
        ...options.headers,
      },
    });
  }

  /**
   * Test a webhook
   * Sends a test event to the webhook
   * ### Authorization
   * A service token or OAuth token must have at least one of the following access or scopes in order to use this API endpoint:
   *
   * **Service Token Accesses**
   * `write_database`
   *
   * **OAuth Scopes**
   *
   * | Resource | Scopes |
   * | :------- | :---------- |
   * | Organization | `write_databases` |
   * | Database | `write_database` |
   */
  public testWebhook<ThrowOnError extends boolean = true>(
    options: Options<TestWebhookData, ThrowOnError>,
  ) {
    return (options.client ?? this._client).post<
      TestWebhookResponses,
      TestWebhookErrors,
      ThrowOnError
    >({
      url: "/organizations/{organization}/databases/{database}/webhooks/{id}/test",
      ...options,
    });
  }

  /**
   * List workflows
   *
   *
   */
  public listWorkflows<ThrowOnError extends boolean = true>(
    options: Options<ListWorkflowsData, ThrowOnError>,
  ) {
    return (options.client ?? this._client).get<
      ListWorkflowsResponses,
      ListWorkflowsErrors,
      ThrowOnError
    >({
      url: "/organizations/{organization}/databases/{database}/workflows",
      ...options,
    });
  }

  /**
   * Create a workflow
   *
   *
   */
  public createWorkflow<ThrowOnError extends boolean = true>(
    options: Options<CreateWorkflowData, ThrowOnError>,
  ) {
    return (options.client ?? this._client).post<
      CreateWorkflowResponses,
      CreateWorkflowErrors,
      ThrowOnError
    >({
      url: "/organizations/{organization}/databases/{database}/workflows",
      ...options,
      headers: {
        "Content-Type": "application/json",
        ...options.headers,
      },
    });
  }

  /**
   * Cancel a workflow
   *
   *
   */
  public workflowCancel<ThrowOnError extends boolean = true>(
    options: Options<WorkflowCancelData, ThrowOnError>,
  ) {
    return (options.client ?? this._client).delete<
      WorkflowCancelResponses,
      WorkflowCancelErrors,
      ThrowOnError
    >({
      url: "/organizations/{organization}/databases/{database}/workflows/{number}",
      ...options,
    });
  }

  /**
   * Get a workflow
   *
   *
   */
  public getWorkflow<ThrowOnError extends boolean = true>(
    options: Options<GetWorkflowData, ThrowOnError>,
  ) {
    return (options.client ?? this._client).get<
      GetWorkflowResponses,
      GetWorkflowErrors,
      ThrowOnError
    >({
      url: "/organizations/{organization}/databases/{database}/workflows/{number}",
      ...options,
    });
  }

  /**
   * Complete a workflow
   *
   *
   */
  public workflowComplete<ThrowOnError extends boolean = true>(
    options: Options<WorkflowCompleteData, ThrowOnError>,
  ) {
    return (options.client ?? this._client).patch<
      WorkflowCompleteResponses,
      WorkflowCompleteErrors,
      ThrowOnError
    >({
      url: "/organizations/{organization}/databases/{database}/workflows/{number}/complete",
      ...options,
    });
  }

  /**
   * Cutover traffic
   *
   *
   */
  public workflowCutover<ThrowOnError extends boolean = true>(
    options: Options<WorkflowCutoverData, ThrowOnError>,
  ) {
    return (options.client ?? this._client).patch<
      WorkflowCutoverResponses,
      WorkflowCutoverErrors,
      ThrowOnError
    >({
      url: "/organizations/{organization}/databases/{database}/workflows/{number}/cutover",
      ...options,
    });
  }

  /**
   * Retry a failed workflow
   *
   *
   */
  public workflowRetry<ThrowOnError extends boolean = true>(
    options: Options<WorkflowRetryData, ThrowOnError>,
  ) {
    return (options.client ?? this._client).patch<
      WorkflowRetryResponses,
      WorkflowRetryErrors,
      ThrowOnError
    >({
      url: "/organizations/{organization}/databases/{database}/workflows/{number}/retry",
      ...options,
    });
  }

  /**
   * Reverse traffic cutover
   *
   *
   */
  public workflowReverseCutover<ThrowOnError extends boolean = true>(
    options: Options<WorkflowReverseCutoverData, ThrowOnError>,
  ) {
    return (options.client ?? this._client).patch<
      WorkflowReverseCutoverResponses,
      WorkflowReverseCutoverErrors,
      ThrowOnError
    >({
      url: "/organizations/{organization}/databases/{database}/workflows/{number}/reverse-cutover",
      ...options,
    });
  }

  /**
   * Reverse traffic
   *
   *
   */
  public workflowReverseTraffic<ThrowOnError extends boolean = true>(
    options: Options<WorkflowReverseTrafficData, ThrowOnError>,
  ) {
    return (options.client ?? this._client).patch<
      WorkflowReverseTrafficResponses,
      WorkflowReverseTrafficErrors,
      ThrowOnError
    >({
      url: "/organizations/{organization}/databases/{database}/workflows/{number}/reverse-traffic",
      ...options,
    });
  }

  /**
   * Switch primary traffic
   *
   *
   */
  public workflowSwitchPrimaries<ThrowOnError extends boolean = true>(
    options: Options<WorkflowSwitchPrimariesData, ThrowOnError>,
  ) {
    return (options.client ?? this._client).patch<
      WorkflowSwitchPrimariesResponses,
      WorkflowSwitchPrimariesErrors,
      ThrowOnError
    >({
      url: "/organizations/{organization}/databases/{database}/workflows/{number}/switch-primaries",
      ...options,
    });
  }

  /**
   * Switch replica traffic
   *
   *
   */
  public workflowSwitchReplicas<ThrowOnError extends boolean = true>(
    options: Options<WorkflowSwitchReplicasData, ThrowOnError>,
  ) {
    return (options.client ?? this._client).patch<
      WorkflowSwitchReplicasResponses,
      WorkflowSwitchReplicasErrors,
      ThrowOnError
    >({
      url: "/organizations/{organization}/databases/{database}/workflows/{number}/switch-replicas",
      ...options,
    });
  }

  /**
   * Verify workflow data
   *
   *
   */
  public verifyWorkflow<ThrowOnError extends boolean = true>(
    options: Options<VerifyWorkflowData, ThrowOnError>,
  ) {
    return (options.client ?? this._client).patch<
      VerifyWorkflowResponses,
      VerifyWorkflowErrors,
      ThrowOnError
    >({
      url: "/organizations/{organization}/databases/{database}/workflows/{number}/verify-data",
      ...options,
    });
  }

  /**
   * Delete a database
   *
   * ### Authorization
   * A service token or OAuth token must have at least one of the following access or scopes in order to use this API endpoint:
   *
   * **Service Token Accesses**
   * `delete_database`
   *
   * **OAuth Scopes**
   *
   * | Resource | Scopes |
   * | :------- | :---------- |
   * | Organization | `delete_databases` |
   * | Database | `delete_database` |
   */
  public deleteDatabase<ThrowOnError extends boolean = true>(
    options: Options<DeleteDatabaseData, ThrowOnError>,
  ) {
    return (options.client ?? this._client).delete<
      DeleteDatabaseResponses,
      DeleteDatabaseErrors,
      ThrowOnError
    >({
      url: "/organizations/{organization}/databases/{name}",
      ...options,
    });
  }

  /**
   * Get a database
   *
   * ### Authorization
   * A service token or OAuth token must have at least one of the following access or scopes in order to use this API endpoint:
   *
   * **Service Token Accesses**
   * `read_database`, `delete_database`, `write_database`, `read_branch`, `delete_branch`, `create_branch`, `delete_production_branch`, `connect_branch`, `connect_production_branch`, `delete_branch_password`, `delete_production_branch_password`, `read_deploy_request`, `create_deploy_request`, `approve_deploy_request`, `read_schema_recommendations`, `close_schema_recommendations`, `read_comment`, `create_comment`, `restore_backup`, `restore_production_branch_backup`, `read_backups`, `write_backups`, `delete_backups`, `delete_production_branch_backups`, `write_branch_vschema`, `write_production_branch_vschema`
   *
   * **OAuth Scopes**
   *
   * | Resource | Scopes |
   * | :------- | :---------- |
   * | Organization | `read_databases` |
   * | Database | `read_database` |
   */
  public getDatabase<ThrowOnError extends boolean = true>(
    options: Options<GetDatabaseData, ThrowOnError>,
  ) {
    return (options.client ?? this._client).get<
      GetDatabaseResponses,
      GetDatabaseErrors,
      ThrowOnError
    >({
      url: "/organizations/{organization}/databases/{name}",
      ...options,
    });
  }

  /**
   * Update database settings
   *
   * ### Authorization
   * A service token or OAuth token must have at least one of the following access or scopes in order to use this API endpoint:
   *
   * **Service Token Accesses**
   * `write_database`
   *
   * **OAuth Scopes**
   *
   * | Resource | Scopes |
   * | :------- | :---------- |
   * | Organization | `write_databases` |
   * | Database | `write_database` |
   */
  public updateDatabaseSettings<ThrowOnError extends boolean = true>(
    options: Options<UpdateDatabaseSettingsData, ThrowOnError>,
  ) {
    return (options.client ?? this._client).patch<
      UpdateDatabaseSettingsResponses,
      UpdateDatabaseSettingsErrors,
      ThrowOnError
    >({
      url: "/organizations/{organization}/databases/{name}",
      ...options,
      headers: {
        "Content-Type": "application/json",
        ...options.headers,
      },
    });
  }

  /**
   * List read-only regions
   * List read-only regions for the database's default branch
   * ### Authorization
   * A service token or OAuth token must have at least one of the following access or scopes in order to use this API endpoint:
   *
   * **Service Token Accesses**
   * `read_database`, `delete_database`, `write_database`, `read_branch`, `delete_branch`, `create_branch`, `delete_production_branch`, `connect_branch`, `connect_production_branch`, `delete_branch_password`, `delete_production_branch_password`, `read_deploy_request`, `create_deploy_request`, `approve_deploy_request`, `read_schema_recommendations`, `close_schema_recommendations`, `read_comment`, `create_comment`, `restore_backup`, `restore_production_branch_backup`, `read_backups`, `write_backups`, `delete_backups`, `delete_production_branch_backups`, `write_branch_vschema`, `write_production_branch_vschema`
   *
   * **OAuth Scopes**
   *
   * | Resource | Scopes |
   * | :------- | :---------- |
   * | Organization | `read_branches` |
   * | Database | `read_branches` |
   */
  public listReadOnlyRegions<ThrowOnError extends boolean = true>(
    options: Options<ListReadOnlyRegionsData, ThrowOnError>,
  ) {
    return (options.client ?? this._client).get<
      ListReadOnlyRegionsResponses,
      ListReadOnlyRegionsErrors,
      ThrowOnError
    >({
      url: "/organizations/{organization}/databases/{name}/read-only-regions",
      ...options,
    });
  }

  /**
   * List database regions
   *
   * ### Authorization
   * A service token or OAuth token must have at least one of the following access or scopes in order to use this API endpoint:
   *
   * **Service Token Accesses**
   * `read_database`, `delete_database`, `write_database`, `read_branch`, `delete_branch`, `create_branch`, `delete_production_branch`, `connect_branch`, `connect_production_branch`, `delete_branch_password`, `delete_production_branch_password`, `read_deploy_request`, `create_deploy_request`, `approve_deploy_request`, `read_schema_recommendations`, `close_schema_recommendations`, `read_comment`, `create_comment`, `restore_backup`, `restore_production_branch_backup`, `read_backups`, `write_backups`, `delete_backups`, `delete_production_branch_backups`, `write_branch_vschema`, `write_production_branch_vschema`
   *
   * **OAuth Scopes**
   *
   * | Resource | Scopes |
   * | :------- | :---------- |
   * | Organization | `read_databases` |
   * | Database | `read_database` |
   */
  public listDatabaseRegions<ThrowOnError extends boolean = true>(
    options: Options<ListDatabaseRegionsData, ThrowOnError>,
  ) {
    return (options.client ?? this._client).get<
      ListDatabaseRegionsResponses,
      ListDatabaseRegionsErrors,
      ThrowOnError
    >({
      url: "/organizations/{organization}/databases/{name}/regions",
      ...options,
    });
  }

  /**
   * Get invoices
   * Get the invoices for an organization
   * ### Authorization
   * A service token or OAuth token must have at least one of the following access or scopes in order to use this API endpoint:
   *
   * **Service Token Accesses**
   * `read_invoices`
   *
   * **OAuth Scopes**
   *
   * | Resource | Scopes |
   * | :------- | :---------- |
   * | Organization | `read_invoices` |
   */
  public listInvoices<ThrowOnError extends boolean = true>(
    options: Options<ListInvoicesData, ThrowOnError>,
  ) {
    return (options.client ?? this._client).get<
      ListInvoicesResponses,
      ListInvoicesErrors,
      ThrowOnError
    >({
      url: "/organizations/{organization}/invoices",
      ...options,
    });
  }

  /**
   * Get an invoice
   *
   * ### Authorization
   * A service token or OAuth token must have at least one of the following access or scopes in order to use this API endpoint:
   *
   * **Service Token Accesses**
   * `read_invoices`
   *
   * **OAuth Scopes**
   *
   * | Resource | Scopes |
   * | :------- | :---------- |
   * | Organization | `read_invoices` |
   */
  public getInvoice<ThrowOnError extends boolean = true>(
    options: Options<GetInvoiceData, ThrowOnError>,
  ) {
    return (options.client ?? this._client).get<
      GetInvoiceResponses,
      GetInvoiceErrors,
      ThrowOnError
    >({
      url: "/organizations/{organization}/invoices/{id}",
      ...options,
    });
  }

  /**
   * Get invoice line items
   * Get the line items for an invoice
   * ### Authorization
   * A service token or OAuth token must have at least one of the following access or scopes in order to use this API endpoint:
   *
   * **Service Token Accesses**
   * `read_invoices`
   *
   * **OAuth Scopes**
   *
   * | Resource | Scopes |
   * | :------- | :---------- |
   * | Organization | `read_invoices` |
   */
  public getInvoiceLineItems<ThrowOnError extends boolean = true>(
    options: Options<GetInvoiceLineItemsData, ThrowOnError>,
  ) {
    return (options.client ?? this._client).get<
      GetInvoiceLineItemsResponses,
      GetInvoiceLineItemsErrors,
      ThrowOnError
    >({
      url: "/organizations/{organization}/invoices/{id}/line-items",
      ...options,
    });
  }

  /**
   * List organization members
   *
   * ### Authorization
   * A service token   must have at least one of the following access   in order to use this API endpoint:
   *
   * **Service Token Accesses**
   * `read_organization`
   *
   *
   */
  public listOrganizationMembers<ThrowOnError extends boolean = true>(
    options: Options<ListOrganizationMembersData, ThrowOnError>,
  ) {
    return (options.client ?? this._client).get<
      ListOrganizationMembersResponses,
      ListOrganizationMembersErrors,
      ThrowOnError
    >({
      url: "/organizations/{organization}/members",
      ...options,
    });
  }

  /**
   * List OAuth applications
   *
   * ### Authorization
   * A service token   must have at least one of the following access   in order to use this API endpoint:
   *
   * **Service Token Accesses**
   * `read_oauth_applications`
   *
   *
   */
  public listOauthApplications<ThrowOnError extends boolean = true>(
    options: Options<ListOauthApplicationsData, ThrowOnError>,
  ) {
    return (options.client ?? this._client).get<
      ListOauthApplicationsResponses,
      ListOauthApplicationsErrors,
      ThrowOnError
    >({
      url: "/organizations/{organization}/oauth-applications",
      ...options,
    });
  }

  /**
   * Get an OAuth application
   *
   * ### Authorization
   * A service token   must have at least one of the following access   in order to use this API endpoint:
   *
   * **Service Token Accesses**
   * `read_oauth_applications`
   *
   *
   */
  public getOauthApplication<ThrowOnError extends boolean = true>(
    options: Options<GetOauthApplicationData, ThrowOnError>,
  ) {
    return (options.client ?? this._client).get<
      GetOauthApplicationResponses,
      GetOauthApplicationErrors,
      ThrowOnError
    >({
      url: "/organizations/{organization}/oauth-applications/{application_id}",
      ...options,
    });
  }

  /**
   * List OAuth tokens
   * List OAuth tokens created by an OAuth application
   * ### Authorization
   * A service token   must have at least one of the following access   in order to use this API endpoint:
   *
   * **Service Token Accesses**
   * `read_oauth_tokens`
   *
   *
   */
  public listOauthTokens<ThrowOnError extends boolean = true>(
    options: Options<ListOauthTokensData, ThrowOnError>,
  ) {
    return (options.client ?? this._client).get<
      ListOauthTokensResponses,
      ListOauthTokensErrors,
      ThrowOnError
    >({
      url: "/organizations/{organization}/oauth-applications/{application_id}/tokens",
      ...options,
    });
  }

  /**
   * Delete an OAuth token
   *
   * ### Authorization
   * A service token   must have at least one of the following access   in order to use this API endpoint:
   *
   * **Service Token Accesses**
   * `delete_oauth_tokens`
   *
   *
   */
  public deleteOauthToken<ThrowOnError extends boolean = true>(
    options: Options<DeleteOauthTokenData, ThrowOnError>,
  ) {
    return (options.client ?? this._client).delete<
      DeleteOauthTokenResponses,
      DeleteOauthTokenErrors,
      ThrowOnError
    >({
      url: "/organizations/{organization}/oauth-applications/{application_id}/tokens/{token_id}",
      ...options,
    });
  }

  /**
   * Get an OAuth token
   *
   * ### Authorization
   * A service token   must have at least one of the following access   in order to use this API endpoint:
   *
   * **Service Token Accesses**
   * `read_oauth_tokens`
   *
   *
   */
  public getOauthToken<ThrowOnError extends boolean = true>(
    options: Options<GetOauthTokenData, ThrowOnError>,
  ) {
    return (options.client ?? this._client).get<
      GetOauthTokenResponses,
      GetOauthTokenErrors,
      ThrowOnError
    >({
      url: "/organizations/{organization}/oauth-applications/{application_id}/tokens/{token_id}",
      ...options,
    });
  }

  /**
   * Create or renew an OAuth token
   * Create an OAuth token from an authorization grant code, or refresh an OAuth token from a refresh token
   * ### Authorization
   * A service token   must have at least one of the following access   in order to use this API endpoint:
   *
   * **Service Token Accesses**
   * `write_oauth_tokens`
   *
   *
   */
  public createOauthToken<ThrowOnError extends boolean = true>(
    options: Options<CreateOauthTokenData, ThrowOnError>,
  ) {
    return (options.client ?? this._client).post<
      CreateOauthTokenResponses,
      CreateOauthTokenErrors,
      ThrowOnError
    >({
      url: "/organizations/{organization}/oauth-applications/{id}/token",
      ...options,
      headers: {
        "Content-Type": "application/json",
        ...options.headers,
      },
    });
  }

  /**
   * List public regions
   * Endpoint is available without authentication.
   *
   */
  public listPublicRegions<ThrowOnError extends boolean = true>(
    options?: Options<ListPublicRegionsData, ThrowOnError>,
  ) {
    return (options?.client ?? this._client).get<
      ListPublicRegionsResponses,
      ListPublicRegionsErrors,
      ThrowOnError
    >({
      url: "/regions",
      ...options,
    });
  }

  /**
   * Get current user
   * Get the user associated with this service token
   * ### Authorization
   * A   OAuth token must have at least one of the following   scopes in order to use this API endpoint:
   *
   * **OAuth Scopes**
   *
   * | Resource | Scopes |
   * | :------- | :---------- |
   * | User | `read_user` |
   */
  public getCurrentUser<ThrowOnError extends boolean = true>(
    options?: Options<GetCurrentUserData, ThrowOnError>,
  ) {
    return (options?.client ?? this._client).get<
      GetCurrentUserResponses,
      GetCurrentUserErrors,
      ThrowOnError
    >({
      url: "/user",
      ...options,
    });
  }

  /**
   * List keyspace resizes
   */
  public listKeyspaceResizes<ThrowOnError extends boolean = true>(
    options: Options<ListKeyspaceResizesData, ThrowOnError>,
  ) {
    return (options.client ?? this._client).get<
      ListKeyspaceResizesResponses,
      ListKeyspaceResizesErrors,
      ThrowOnError
    >({
      url: "/organizations/{organization}/databases/{database}/branches/{branch}/keyspaces/{name}/resizes",
      ...options,
    });
  }
}
